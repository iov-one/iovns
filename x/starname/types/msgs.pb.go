// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/starname/types/msgs.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MsgAddAccountCertificates is the message used
// when a user wants to add new certificates
// to his account
type MsgAddAccountCertificates struct {
	// Domain is the domain of the account
	Domain string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"domain"`
	// Name is the name of the account
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	// Owner is the owner of the account
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=Owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner"`
	// NewCertificate is the new certificate to add
	NewCertificate []byte `protobuf:"bytes,4,opt,name=NewCertificate,proto3" json:"new_certificate"`
	// FeePayerAddr is the address of the entity that has to pay product fees
	FeePayerAddr         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=FeePayerAddr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"fee_payer"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *MsgAddAccountCertificates) Reset()         { *m = MsgAddAccountCertificates{} }
func (m *MsgAddAccountCertificates) String() string { return proto.CompactTextString(m) }
func (*MsgAddAccountCertificates) ProtoMessage()    {}
func (*MsgAddAccountCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_67a31da34b6acae6, []int{0}
}
func (m *MsgAddAccountCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAccountCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAccountCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAccountCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAccountCertificates.Merge(m, src)
}
func (m *MsgAddAccountCertificates) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAccountCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAccountCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAccountCertificates proto.InternalMessageInfo

func (m *MsgAddAccountCertificates) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *MsgAddAccountCertificates) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgAddAccountCertificates) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgAddAccountCertificates) GetNewCertificate() []byte {
	if m != nil {
		return m.NewCertificate
	}
	return nil
}

func (m *MsgAddAccountCertificates) GetFeePayerAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.FeePayerAddr
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgAddAccountCertificates)(nil), "MsgAddAccountCertificates")
}

func init() { proto.RegisterFile("x/starname/types/msgs.proto", fileDescriptor_67a31da34b6acae6) }

var fileDescriptor_67a31da34b6acae6 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x4d, 0xed, 0x14, 0x1b, 0x8a, 0xc2, 0x28, 0x38, 0xfe, 0x30, 0x29, 0x5d, 0x75, 0xd3,
	0xce, 0xc2, 0x9d, 0x82, 0x30, 0x55, 0xdc, 0x59, 0xcb, 0x2c, 0xdd, 0x94, 0x34, 0xb9, 0x1d, 0x07,
	0xc9, 0xa4, 0x24, 0x29, 0xb5, 0x6f, 0xe2, 0x23, 0xb9, 0xec, 0x13, 0x04, 0x19, 0x77, 0xf3, 0x08,
	0xae, 0x64, 0x32, 0x05, 0x7f, 0x76, 0xae, 0x72, 0x39, 0xe7, 0x9e, 0x8f, 0x93, 0x8b, 0xcf, 0x5e,
	0x22, 0x6d, 0xa8, 0xca, 0xa9, 0x80, 0xc8, 0xac, 0x17, 0xa0, 0x23, 0xa1, 0x53, 0x3d, 0x5c, 0x28,
	0x69, 0xe4, 0xe9, 0x51, 0x2a, 0x53, 0xe9, 0xc6, 0xa8, 0x9a, 0x6a, 0xb5, 0xb7, 0x69, 0xe0, 0x93,
	0x7b, 0x9d, 0xc6, 0x9c, 0xc7, 0x8c, 0xc9, 0x65, 0x6e, 0x6e, 0x40, 0x99, 0x6c, 0x9e, 0x31, 0x6a,
	0x40, 0xfb, 0x3d, 0xdc, 0xba, 0x95, 0x82, 0x66, 0x79, 0x80, 0xba, 0xa8, 0xdf, 0x1e, 0xe1, 0xd2,
	0x92, 0x16, 0x77, 0x4a, 0xb2, 0x75, 0xfc, 0x73, 0xdc, 0x1c, 0x53, 0x01, 0x41, 0xc3, 0x6d, 0xec,
	0x95, 0x96, 0x34, 0xab, 0x02, 0x89, 0x53, 0xfd, 0x09, 0xf6, 0x1e, 0x56, 0x39, 0xa8, 0x60, 0xb7,
	0x8b, 0xfa, 0x9d, 0xd1, 0x65, 0x69, 0x89, 0x27, 0x2b, 0xe1, 0xd3, 0x92, 0x41, 0x9a, 0x99, 0xa7,
	0xe5, 0x6c, 0xc8, 0xa4, 0x88, 0x98, 0xd4, 0x42, 0xea, 0xed, 0x33, 0xd0, 0xfc, 0xb9, 0xfe, 0xc0,
	0x30, 0x66, 0x2c, 0xe6, 0x5c, 0x81, 0xd6, 0x49, 0x0d, 0xf2, 0xaf, 0xf0, 0xfe, 0x18, 0x56, 0x3f,
	0x6a, 0x06, 0x4d, 0x87, 0x3e, 0x2c, 0x2d, 0x39, 0xc8, 0x61, 0x35, 0x65, 0xdf, 0x56, 0xf2, 0x67,
	0xd5, 0x9f, 0xe1, 0xce, 0x1d, 0xc0, 0x84, 0xae, 0x41, 0x55, 0xd8, 0xc0, 0x73, 0xd1, 0xeb, 0xd2,
	0x92, 0xf6, 0x1c, 0x60, 0xba, 0xa8, 0x8c, 0xff, 0x37, 0xfb, 0xc5, 0x1c, 0x1d, 0xbf, 0x15, 0x21,
	0xda, 0x14, 0x21, 0x7a, 0x2f, 0x42, 0xf4, 0xfa, 0x11, 0xee, 0x3c, 0x7a, 0x2e, 0x31, 0x6b, 0xb9,
	0x93, 0x5f, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xda, 0x99, 0x74, 0xdb, 0xa7, 0x01, 0x00, 0x00,
}

func (m *MsgAddAccountCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAccountCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAccountCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FeePayerAddr) > 0 {
		i -= len(m.FeePayerAddr)
		copy(dAtA[i:], m.FeePayerAddr)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.FeePayerAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewCertificate) > 0 {
		i -= len(m.NewCertificate)
		copy(dAtA[i:], m.NewCertificate)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.NewCertificate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddAccountCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.NewCertificate)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.FeePayerAddr)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddAccountCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAccountCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAccountCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCertificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCertificate = append(m.NewCertificate[:0], dAtA[iNdEx:postIndex]...)
			if m.NewCertificate == nil {
				m.NewCertificate = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayerAddr = append(m.FeePayerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.FeePayerAddr == nil {
				m.FeePayerAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
